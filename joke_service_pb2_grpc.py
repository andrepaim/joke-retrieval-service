# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import joke_service_pb2 as joke__service__pb2


class JokeServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetJoke = channel.unary_unary(
                '/joke.JokeService/GetJoke',
                request_serializer=joke__service__pb2.JokeRequest.SerializeToString,
                response_deserializer=joke__service__pb2.JokeResponse.FromString,
                )
        self.GetJokes = channel.unary_unary(
                '/joke.JokeService/GetJokes',
                request_serializer=joke__service__pb2.JokeRequest.SerializeToString,
                response_deserializer=joke__service__pb2.JokesResponse.FromString,
                )
        self.RecordFeedback = channel.unary_unary(
                '/joke.JokeService/RecordFeedback',
                request_serializer=joke__service__pb2.FeedbackRequest.SerializeToString,
                response_deserializer=joke__service__pb2.FeedbackResponse.FromString,
                )
        self.AddJoke = channel.unary_unary(
                '/joke.JokeService/AddJoke',
                request_serializer=joke__service__pb2.AddJokeRequest.SerializeToString,
                response_deserializer=joke__service__pb2.JokeResponse.FromString,
                )


class JokeServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetJoke(self, request, context):
        """Get a joke based on a search query and context
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetJokes(self, request, context):
        """Get multiple jokes based on a search query and context
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecordFeedback(self, request, context):
        """Record user feedback for a joke (like/dislike)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddJoke(self, request, context):
        """Add a new joke to the database
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_JokeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetJoke': grpc.unary_unary_rpc_method_handler(
                    servicer.GetJoke,
                    request_deserializer=joke__service__pb2.JokeRequest.FromString,
                    response_serializer=joke__service__pb2.JokeResponse.SerializeToString,
            ),
            'GetJokes': grpc.unary_unary_rpc_method_handler(
                    servicer.GetJokes,
                    request_deserializer=joke__service__pb2.JokeRequest.FromString,
                    response_serializer=joke__service__pb2.JokesResponse.SerializeToString,
            ),
            'RecordFeedback': grpc.unary_unary_rpc_method_handler(
                    servicer.RecordFeedback,
                    request_deserializer=joke__service__pb2.FeedbackRequest.FromString,
                    response_serializer=joke__service__pb2.FeedbackResponse.SerializeToString,
            ),
            'AddJoke': grpc.unary_unary_rpc_method_handler(
                    servicer.AddJoke,
                    request_deserializer=joke__service__pb2.AddJokeRequest.FromString,
                    response_serializer=joke__service__pb2.JokeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'joke.JokeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class JokeService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetJoke(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/joke.JokeService/GetJoke',
            joke__service__pb2.JokeRequest.SerializeToString,
            joke__service__pb2.JokeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetJokes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/joke.JokeService/GetJokes',
            joke__service__pb2.JokeRequest.SerializeToString,
            joke__service__pb2.JokesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RecordFeedback(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/joke.JokeService/RecordFeedback',
            joke__service__pb2.FeedbackRequest.SerializeToString,
            joke__service__pb2.FeedbackResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddJoke(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/joke.JokeService/AddJoke',
            joke__service__pb2.AddJokeRequest.SerializeToString,
            joke__service__pb2.JokeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
